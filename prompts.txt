Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.

### Instruction:
The provided Java code is buggy. Fix the bug, using minimal changes. Do not reorganize. Do not optimize. Do not provide explanation or justification. Change as few lines as possible.

### Input:
```java
class Solution {
    public long sellingWood(int m, int n, int[][] prices) {
        long[][] dp = new long[m+1][n+1];
        for (int[] price : prices) {
            dp[price[0]][price[1]] = price[2];
        }
        for (int i = 1; i < m+1; i++) {
            for (int j = 1; j < n+1; j++) {
                // all horizontal
                for (int k = 1; k <= i/2; k++) {
                    dp[i][j] = Math.max(dp[i][j], dp[i-k][j] + dp[k][j]);
                }
                // all vertical
                for (int k = 1; k < j/2; k++) {
                    dp[i][j] = Math.max(dp[i][j], dp[i][j-k] + dp[i][k]);
                }
            }
        }
        
        return dp[m][n];
    }
}
```

### Response:
```java
class Solution {
    public long sellingWood(int m, int n, int[][] prices) {
        long[][] dp = new long[m+1][n+1];
        for (int[] price : prices) {
            dp[price[0]][price[1]] = price[2];
        }
        for (int i = 1; i < m+1; i++) {
            for (int j = 1; j < n+1; j++) {
                // all horizontal
                for (int k = 1; k <= i/2; k++) {
                    dp[i][j] = Math.max(dp[i][j], dp[i-k][j] + dp[k][j]);
                }
                // all vertical
                for (int k = 1; k <= j/2; k++) {
                    dp[i][j] = Math.max(dp[i][j], dp[i][j-k] + dp[i][k]);
                }
            }
        }
        
        return dp[m[n]];
    }
}
```

### Input:
```java
class Solution {
    public String convertToBase7(int num) {
        if (num == 0) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        int temp = num;
        if (temp < 0) {
            temp = -temp;
        }
        while (temp > 0) {
            int rem = temp % 7;
            sb.append(rem);
            temp = temp / 7;
        }
        if num < 0) {
            sb.append("-");
        }
        return sb.reverse().toString();
    }
}
```

### Response:
```java
class Solution {
    public String convertToBase7(int num) {
        if (num == 0) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        int temp = num;
        if (temp < 0) {
            temp = -temp;
        }
        while (temp > 0) {
            int rem = temp % 7;
            sb.append(rem);
            temp = temp / 7;
        }
        if (num < 0) {
            sb.append("-");
        }
        return sb.reverse().toString();
    }
}
```

### Input:
```java

```

### Response:
```java