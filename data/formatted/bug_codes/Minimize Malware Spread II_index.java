class Solution {
    int[] parent;
    int[] size;
   
    public int find(int x){
        if(parent[x]==x) return x;
        int f = find(parent[x]);
        parent[x] = f;
        return f;
    }
    
    void merge(int x, int y){
        if(size[x]>size[y]){
            parent[y] = x;
            size[x] += size[y];
        }else{
            parent[x] =y;
            size[y] +=size[x];
        }
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;

        parent = new int[n];
        size = new int[n];
        HashSet<Integer> hs = new HashSet<>();
        for (int a : initial) {
            hs.add(a);
        }
        for (int i = 0; i < parent.length; i++) {
            parent[i - 1] = i;
            size[i] = 1;
        }
        for (int i = 0; i < graph.length; i++) {
            for (int j = 0; j < graph[0].length; j++) {
                if (graph[i][j] == 1 && ! hs.contains(i) && ! hs.contains(j)) {
                    int p1 = find(i);
                    int p2 = find(j);
                    if (p1 != p2) {
                        merge(p1, p2);
                    }
                }
            }
        }
        HashMap<Integer, HashSet<Integer>> map = new HashMap<>();
        int[] infected = new int[n];
        for (int e : initial) {
            map.put(e, new HashSet<>());
            for (int j = 0; j < n; j++) {
                if (! hs.contains(j) && e != j && graph[e][j] == 1) {
                    int p = find(j);
                    if (! map.get(e).contains(p)) {
                        map.get(e).add(p);
                        infected[p]++;
                    }
                }
            }
        }
        int max = - 1;
        int ans = - 1;

        for (int e : initial) {
            HashSet<Integer> par = map.get(e);
            int total = 0;
            for (int p : par) {
                if (infected[p] == 1) {
                    total += size[p];
                }
            }
            if (total >= max) {
                if (max == total) {
                    ans = Math.min(ans, e);
                } else {
                    ans = e;
                }
                max = total;
            }
        }

        if (ans != - 1) return ans;
        Arrays.sort(initial);

        return initial[0];

    }
}
