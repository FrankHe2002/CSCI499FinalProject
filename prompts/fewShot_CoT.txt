The provided Java code may be buggy. Review the examples followed by the provided buggy Java code, then identify the bug type. Explain the reasoning process for identifying and fixing the bug. Apply the fix using minimal changes. Do not reorganize or optimize the code. Format the final fixed code in markdown in its entirety.

Example #1:
Code Description:
The function, named findMax, finds the maximum value in an array of integers. The function takes an array of integers nums as input and returns the highest integer value found in the array.
Constraints:
    nums.length > 0
    nums[i] is an integer, where 0 <= i < nums.length

Code:
```java
class Solution {
    public int findMax(int[] nums) {
        int max = nums[0];
        for (int i = 1; i <= nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
            }
        }
        return max;
    }
}
```

Explanation: 
The original code causes an `ArrayIndexOutOfBoundsException` due to the loop condition `i <= nums.length`, which attempts to access an index out of the array's bounds. In Java, array indices range from 0 to `length - 1`. The fix is changing the loop condition to `i < nums.length`, ensuring the loop iterates only within the array's valid range.

Fix:
```java
class Solution {
    public int findMax(int[] nums) {
        int max = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
            }
        }
        return max;
    }
}
```

Example #2:
Code Description:
The function repeatChar takes a character c and an integer times, and returns a string consisting of the character c repeated times times.
Constraints:
    times >= 0
    c is a valid character

Code:
```java
class Solution {
    public String repeatChar(char c, int times) {
        String result = "";
        for (int i = 0; i < times; i++)
            result += c
        return result;
    }
}
```

Explanation:
The error here is a missing semicolon (`;`) at the end of the statement inside the loop. Java requires each statement to end with a semicolon. Adding a semicolon at the end of `result += c` corrects this syntax error.

Fix:
```java
class Solution {
    public String repeatChar(char c, int times) {
        String result = "";
        for (int i = 0; i < times; i++)
            result += c;
        return result;
    }
}
```

Example #3:
Code Description:
The multiply function takes two integer parameters, a and b, and return their product.
Constraints:
    a and b are integers.

Code:
```java
class Solution {
    public int multiply(int a, int b) {
        return a + b;
    }
}
```

Explanation:
The method named `multiply` incorrectly performs addition (`return a + b;`), a logical error. The fix is to replace the addition operation with multiplication (`return a * b;`), aligning the operation with the method's purpose.

Fix:
```java
class Solution {
    public int multiply(int a, int b) {
        return a * b;
    }
}
```

Example #4:
Code Description:
The isEven function determines if a given integer num is even.
Constraints:
    num is an integer.

Code:
```java
class Solution {
    public boolean isEven(int num) {
        return num % 2 == 1;
    }
}
```

Explanation:
The `isEven` method incorrectly checks for odd numbers (`num % 2 == 1`). The fix is changing the condition to `num % 2 == 0`, correctly identifying even numbers.

Fix:
```java
class Solution {
    public boolean isEven(int num) {
        return num % 2 == 0;
    }
}
```

Example #5:
Code Description:
The isLeapYear function in the Solution class is designed to determine if a given year is a leap year. It returns true if the year is a leap year (that is, years that are divisible by 4 but not by 100 unless they are divisible by 400), and false otherwise.
Constraints:
	year is an integer.

Code:
```java
class Solution {
    public boolean isLeapYear(int year) {
        if ((year % 4 == 0) && (year % 100 != 0) || (year % 400 != 0)) {
            return true;
        }
        return false;
    }
}
```

Explanation:
The `isLeapYear` method has an incorrect implementation of the leap year condition. The original condition erroneously includes non-leap years. The correct leap year condition is a year being divisible by 4 and not by 100, unless it's also divisible by 400. The fix adjusts the condition to `(year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0)`, correctly identifying leap years.

Fix:
```java
class Solution {
    public boolean isLeapYear(int year) {
        if ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0)) {
            return true;
        }
        return false;
    }
}
```

Code Description:
{description}

Code:
```java
{code_content}
```
