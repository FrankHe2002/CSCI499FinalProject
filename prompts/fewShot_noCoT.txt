The provided Java code may be buggy. Review the examples followed by the buggy code. Fix the bug, using minimal changes. Do not reorganize. Do not optimize. Do not provide explanation or justification. Format your code in markdown.

Example #1:
Code Description:
The function, named findMax, finds the maximum value in an array of integers. The function takes an array of integers nums as input and returns the highest integer value found in the array.
Constraints:
    nums.length > 0
    nums[i] is an integer, where 0 <= i < nums.length

Code:
```java
class Solution {
    public int findMax(int[] nums) {
        int max = nums[0];
        for (int i = 1; i <= nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
            }
        }
        return max;
    }
}
```

Fix:
```java
class Solution {
    public int findMax(int[] nums) {
        int max = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
            }
        }
        return max;
    }
}
```

Example #2:
Code Description:
The function repeatChar takes a character c and an integer times, and returns a string consisting of the character c repeated times times.
Constraints:
    times >= 0
    c is a valid character

Code:
```java
class Solution {
    public String repeatChar(char c, int times) {
        String result = "";
        for (int i = 0; i < times; i++)
            result += c
        return result;
    }
}
```

Fix:
```java
class Solution {
    public String repeatChar(char c, int times) {
        String result = "";
        for (int i = 0; i < times; i++)
            result += c;
        return result;
    }
}
```

Example #3:
Code Description:
The multiply function takes two integer parameters, a and b, and return their product.
Constraints:
    a and b are integers.

Code:
```java
class Solution {
    public int multiply(int a, int b) {
        return a + b;
    }
}
```

Fix:
```java
class Solution {
    public int multiply(int a, int b) {
        return a * b;
    }
}
```

Example #4:
Code Description:
The isEven function determines if a given integer num is even.
Constraints:
    num is an integer.

Code:
```java
class Solution {
    public boolean isEven(int num) {
        return num % 2 == 1;
    }
}
```

Fix:
```java
class Solution {
    public boolean isEven(int num) {
        return num % 2 == 0;
    }
}
```

Example #5:
Code Description:
The isLeapYear function in the Solution class is designed to determine if a given year is a leap year. It returns true if the year is a leap year (that is, years that are divisible by 4 but not by 100 unless they are divisible by 400), and false otherwise.
Constraints:
	year is an integer.

Code:
```java
class Solution {
    public boolean isLeapYear(int year) {
        if ((year % 4 == 0) && (year % 100 != 0) || (year % 400 != 0)) {
            return true;
        }
        return false;
    }
}
```

Fix:
```java
class Solution {
    public boolean isLeapYear(int year) {
        if ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0)) {
            return true;
        }
        return false;
    }
}
```

Code Description:
{description}

Code:
```java
{code_content}
```
